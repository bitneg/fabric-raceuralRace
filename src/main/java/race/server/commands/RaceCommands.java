package race.server.commands;

import com.mojang.brigadier.arguments.LongArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.text.Text;
import race.server.phase.PhaseState;
import race.server.phase.RacePhaseManager;
import race.server.world.EnhancedWorldManager;
import race.server.world.ServerRaceConfig;
import race.hub.HubManager;
import race.hub.WorldManager;
import race.hub.ProgressSyncManager;

import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static net.minecraft.server.command.CommandManager.*;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–Ω–∫–æ–π
 */
public final class RaceCommands {
    private static final Logger LOGGER = LoggerFactory.getLogger(RaceCommands.class);
    
    public static void register() {
        CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {
            dispatcher.register(literal("race")
                // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                .then(literal("start").executes(RaceCommands::startRace))
                .then(literal("stop").executes(RaceCommands::stopRace))
                .then(literal("lobby")
                    .then(literal("all").executes(RaceCommands::returnAllToLobby))
                    .executes(RaceCommands::returnToLobby))
                .then(literal("status").executes(RaceCommands::showStatus))
                .then(literal("lobbylist").executes(RaceCommands::showLobbyList))
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞
                .then(literal("setup")
                    .then(argument("seed", LongArgumentType.longArg())
                        .executes(ctx -> setupRace(ctx, LongArgumentType.getLong(ctx, "seed")))))
                
                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏
                .then(literal("spectate")
                    .then(argument("player", StringArgumentType.string())
                        .executes(ctx -> spectatePlayer(ctx, StringArgumentType.getString(ctx, "player")))))
                .then(literal("return").executes(RaceCommands::returnBack))
                .then(literal("returnpoint").executes(RaceCommands::showReturnPoint))
                .then(literal("teleport")
                    .then(argument("player", StringArgumentType.string())
                        .executes(ctx -> teleportToPlayer(ctx, StringArgumentType.getString(ctx, "player")))))
                .then(literal("join")
                    .then(argument("player", StringArgumentType.string())
                        .executes(ctx -> delayedJoin(ctx, StringArgumentType.getString(ctx, "player")))))
                .then(literal("parallel")
                    .then(argument("player", StringArgumentType.string())
                        .executes(ctx -> parallelRace(ctx, StringArgumentType.getString(ctx, "player")))))
                .then(literal("cancel").executes(RaceCommands::cancelJoin))
                .then(literal("reset").executes(RaceCommands::resetSeed))
                .then(literal("clear").executes(RaceCommands::clearReturnPoint))
                .then(literal("setpreferred").executes(RaceCommands::setPreferredWorld))
                .then(literal("clearpreferred").executes(RaceCommands::clearPreferredWorld))
                // –ì—Ä—É–ø–ø—ã/–∫–æ–º–∞–Ω–¥—ã –≤ —Ö–∞–±–µ
                .then(literal("team")
                    .then(literal("invite").then(argument("player", StringArgumentType.string())
                        .executes(ctx -> teamInvite(ctx, StringArgumentType.getString(ctx, "player")))))
                    .then(literal("accept").executes(RaceCommands::teamAccept))
                    .then(literal("disband").executes(RaceCommands::teamDisband))
                    .then(literal("leave").executes(RaceCommands::teamLeave))
                )
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                .then(literal("leaderboard").executes(RaceCommands::showLeaderboard))
                .then(literal("help").executes(RaceCommands::showHelp))
                .then(literal("debug-return").executes(RaceCommands::debugReturnPoint))
                .then(literal("clear-return").executes(RaceCommands::clearReturnPoint))
                
                // –ö–æ–º–∞–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ RaceTimeCommands
                
                // –ö–æ–º–∞–Ω–¥—ã —Ö–∞–±–∞
                .then(literal("hub").executes(RaceCommands::goToHub))
                .then(literal("hubinfo").executes(RaceCommands::showHubInfo))
                .then(literal("hubsave").executes(RaceCommands::saveHubData))
                .then(literal("perf").executes(RaceCommands::showPerformance))
                .then(literal("seed")
                    .then(argument("seed", LongArgumentType.longArg())
                        .executes(ctx -> setSeed(ctx, LongArgumentType.getLong(ctx, "seed"))))
                    .then(literal("random").executes(RaceCommands::setRandomSeed)))
                .then(literal("ready").executes(RaceCommands::readyForRace))
                .then(literal("group").executes(RaceCommands::showGroupInfo))
                .then(literal("ghosts")
                    .then(literal("on").executes(ctx -> toggleGhosts(ctx, true)))
                    .then(literal("off").executes(ctx -> toggleGhosts(ctx, false)))
                    .then(literal("force").executes(RaceCommands::forceEnableGhosts))
                    .then(literal("status").executes(RaceCommands::showGhostStatus))
                    .then(literal("test").executes(RaceCommands::testGhostTrail))
                )
                .then(literal("unfreeze").executes(RaceCommands::unfreezePlayer))
                .then(literal("unfreeze-all").executes(RaceCommands::unfreezeAllPlayers))
                .then(literal("tps")
                    .then(literal("on").executes(ctx -> toggleTpsDisplay(ctx, true)))
                    .then(literal("off").executes(ctx -> toggleTpsDisplay(ctx, false)))
                    .executes(RaceCommands::showTpsInfo)
                )
                .then(literal("auto")
                    .then(literal("on").executes(ctx -> toggleAutoOptimization(ctx, true)))
                    .then(literal("off").executes(ctx -> toggleAutoOptimization(ctx, false)))
                    .executes(RaceCommands::showAutoOptimizationInfo)
                )
                .then(literal("unfreeze")
                    .then(literal("all").executes(RaceCommands::forceUnfreezeAll))
                    .executes(RaceCommands::forceUnfreezeSelf)
                )
                .then(literal("clear")
                    .then(literal("all").executes(RaceCommands::clearAllRaceState))
                    .executes(RaceCommands::clearRaceState)
                )
                .then(literal("ghost")
                    .then(literal("quality")
                        .then(literal("0").executes(ctx -> setGhostQuality(ctx, 0)))
                        .then(literal("1").executes(ctx -> setGhostQuality(ctx, 1)))
                        .then(literal("2").executes(ctx -> setGhostQuality(ctx, 2)))
                        .then(literal("3").executes(ctx -> setGhostQuality(ctx, 3)))
                        .executes(RaceCommands::showGhostQualityInfo)
                    )
                    .then(literal("adaptive")
                        .then(literal("on").executes(ctx -> toggleGhostAdaptive(ctx, true)))
                        .then(literal("off").executes(ctx -> toggleGhostAdaptive(ctx, false)))
                        .executes(RaceCommands::showGhostAdaptiveInfo)
                    )
                    .executes(RaceCommands::showGhostInfo)
                )
                .then(literal("go").requires(src -> true).executes(RaceCommands::personalGo))
            );
        });
    }
    
    private static int startRace(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (PhaseState.isRaceActive()) {
            source.sendFeedback(() -> Text.literal("–ì–æ–Ω–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        long seed = ServerRaceConfig.GLOBAL_SEED >= 0 ? ServerRaceConfig.GLOBAL_SEED : -1;
        if (seed < 0) {
            source.sendFeedback(() -> Text.literal("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–¥ –∫–æ–º–∞–Ω–¥–æ–π /race setup <seed>").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–Ω–∫—É
        PhaseState.setRaceActive(true);
        PhaseState.setRaceStartTime(System.currentTimeMillis());
        PhaseState.setRaceSeed(seed);
        RacePhaseManager.resetRace();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–Ω–∫–∏ –∏ –¥–∞–µ–º –∏–º –≤—ã–±–æ—Ä
        for (ServerPlayerEntity player : source.getServer().getPlayerManager().getPlayerList()) {
            // –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–Ω–∫–∏
            player.sendMessage(Text.literal("üèÅ –ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ —Å–∏–¥–µ: " + seed).formatted(net.minecraft.util.Formatting.GOLD), false);
            player.sendMessage(Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race ready —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–Ω–∫–µ").formatted(net.minecraft.util.Formatting.YELLOW), false);
            player.sendMessage(Text.literal("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race join <–∏–≥—Ä–æ–∫> —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É").formatted(net.minecraft.util.Formatting.AQUA), false);
        }
        
        source.sendFeedback(() -> Text.literal("–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ —Å–∏–¥–µ: " + seed).formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    private static int stopRace(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!PhaseState.isRaceActive()) {
            source.sendFeedback(() -> Text.literal("–ì–æ–Ω–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–Ω–∫—É
        PhaseState.setRaceActive(false);
        RacePhaseManager.resetRace();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
        returnToLobby(ctx);
        
        source.sendFeedback(() -> Text.literal("–ì–æ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞").formatted(net.minecraft.util.Formatting.YELLOW), true);
        return 1;
    }
    
    private static int returnToLobby(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —Ö–∞–± (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ)
        String worldNamespace = player.getServerWorld().getRegistryKey().getValue().getNamespace();
        if ("fabric_race".equals(worldNamespace)) {
            race.server.world.ReturnPointRegistry.saveCurrent(player);
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ö–∞–±
        try {
            // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            player.setHealth(player.getMaxHealth());
            player.getHungerManager().setFoodLevel(20);
            player.getHungerManager().setSaturationLevel(20.0f);
            player.setAir(player.getMaxAir());
            player.setVelocity(0, 0, 0);
            player.fallDistance = 0;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ —Ö–∞–±
            race.hub.HubManager.clearPlayerChoice(player.getUuid());
            source.sendFeedback(() -> Text.literal("–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ").formatted(net.minecraft.util.Formatting.YELLOW), false);
            
            // –ü—Ä—è–º–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ —Ö–∞–±
            race.hub.HubManager.teleportToHub(player);
            source.sendFeedback(() -> Text.literal("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.GREEN), false);
        } catch (Throwable t) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ö–∞–±: " + t.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
        }
        return 1;
    }

    private static int teamInvite(CommandContext<ServerCommandSource> ctx, String playerName) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity inviter)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(playerName);
        if (target == null) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + playerName).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        race.hub.HubManager.inviteToTeam(inviter, target);
        return 1;
    }

    private static int teamAccept(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        race.hub.HubManager.acceptTeamInvite(player);
        return 1;
    }
    private static int returnAllToLobby(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–∞–µ–º –∏–º –≤—ã–±–æ—Ä
        final int[] playersInPersonalWorlds = {0};
        for (ServerPlayerEntity player : source.getServer().getPlayerManager().getPlayerList()) {
            String worldNamespace = player.getServerWorld().getRegistryKey().getValue().getNamespace();
            if ("fabric_race".equals(worldNamespace)) {
                playersInPersonalWorlds[0]++;
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —Ö–∞–±
                race.server.world.ReturnPointRegistry.saveCurrent(player);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ö–∞–±
                player.sendMessage(Text.literal("üè† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.YELLOW), false);
                player.sendMessage(Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race lobby —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.AQUA), false);
            }
        }
        
        if (playersInPersonalWorlds[0] > 0) {
            source.sendFeedback(() -> Text.literal("–£–≤–µ–¥–æ–º–ª–µ–Ω—ã " + playersInPersonalWorlds[0] + " –∏–≥—Ä–æ–∫–æ–≤ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.GREEN), true);
        } else {
            source.sendFeedback(() -> Text.literal("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö").formatted(net.minecraft.util.Formatting.YELLOW), true);
        }
        return 1;
    }
    
    private static int showStatus(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!PhaseState.isRaceActive()) {
            source.sendFeedback(() -> Text.literal("–ì–æ–Ω–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        long seed = PhaseState.getRaceSeed();
        long startTime = PhaseState.getRaceStartTime();
        long currentTime = System.currentTimeMillis();
        long raceTime = currentTime - startTime;
        
        source.sendFeedback(() -> Text.literal("=== –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
        source.sendFeedback(() -> Text.literal("–°–∏–¥: " + seed).formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("–í—Ä–µ–º—è –≥–æ–Ω–∫–∏: " + formatTime(raceTime)).formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–æ–≤: " + source.getServer().getPlayerManager().getPlayerList().size()).formatted(net.minecraft.util.Formatting.WHITE), false);
        
        return 1;
    }
    
    private static int setupRace(CommandContext<ServerCommandSource> ctx, long seed) {
        ServerCommandSource source = ctx.getSource();
        
        ServerRaceConfig.GLOBAL_SEED = seed;
        source.sendFeedback(() -> Text.literal("–°–∏–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + seed).formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    private static int spectatePlayer(CommandContext<ServerCommandSource> ctx, String playerName) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity spectator)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(playerName);
        if (target == null) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + playerName).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        // –ó–∞–ø—Ä–µ—Ç: –Ω–µ–ª—å–∑—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –º—ë—Ä—Ç–≤–æ–º—É –∏–≥—Ä–æ–∫—É (–Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å–º–µ—Ä—Ç–∏/—Ä–µ—Å–ø–∞–≤–Ω–∞)
        try {
            if (!target.isAlive() || target.isDead()) {
                source.sendFeedback(() -> Text.literal("–ù–µ–ª—å–∑—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –º—ë—Ä—Ç–≤–æ–º—É –∏–≥—Ä–æ–∫—É").formatted(net.minecraft.util.Formatting.RED), false);
                return 0;
            }
        } catch (Throwable ignored) {}
        if (target.getUuid().equals(spectator.getUuid())) {
            source.sendFeedback(() -> Text.literal("–ù–µ–ª—å–∑—è –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–æ–±–æ–π").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        try {
            race.server.world.ReturnPointRegistry.forceSetReturnPoint(spectator);
            
            String currentWorld = spectator.getServerWorld().getRegistryKey().getValue().toString();
            source.sendFeedback(() -> Text.literal("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + currentWorld).formatted(net.minecraft.util.Formatting.GRAY), false);
            
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
        }
        
        try { spectator.changeGameMode(net.minecraft.world.GameMode.SPECTATOR); } catch (Throwable ignored) {}
        spectator.teleport(target.getServerWorld(), target.getX(), target.getY(), target.getZ(), 
                          target.getYaw(), target.getPitch());
        
        source.sendFeedback(() -> Text.literal("–ù–∞–±–ª—é–¥–∞–µ—Ç–µ –∑–∞ –∏–≥—Ä–æ–∫–æ–º: " + playerName).formatted(net.minecraft.util.Formatting.GREEN), false);
        source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race return –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏").formatted(net.minecraft.util.Formatting.GRAY), false);
        return 1;
    }

    private static int returnBack(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        boolean hasReturnPoint = false;
        try { 
            hasReturnPoint = (race.server.world.ReturnPointRegistry.get(player) != null);
        } catch (Throwable ignored) {}
        
        if (!hasReturnPoint) {
            source.sendFeedback(() -> Text.literal("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.RED), false);
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race lobby –∏–∑ —Å–≤–æ–µ–≥–æ –º–∏—Ä–∞ –∏–ª–∏ /race spectate <player> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏").formatted(net.minecraft.util.Formatting.YELLOW), false);
            return 0;
        }
        
        boolean ok = false;
        try { 
            ok = race.server.world.ReturnPointRegistry.returnPlayer(player); 
        } catch (Throwable ignored) {}
        
        if (!ok) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        source.sendFeedback(() -> Text.literal("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏...").formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
     */
    private static int showReturnPoint(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        try {
            race.server.world.ReturnPointRegistry.ReturnPoint returnPoint = race.server.world.ReturnPointRegistry.get(player);
            if (returnPoint == null) {
                source.sendFeedback(() -> Text.literal("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.RED), false);
                source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race lobby –∏–ª–∏ /race spectate <player> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏").formatted(net.minecraft.util.Formatting.YELLOW), false);
                return 0;
            }
            
            source.sendFeedback(() -> Text.literal("=== –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–ú–∏—Ä: " + returnPoint.worldKey.getValue()).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ü–æ–∑–∏—Ü–∏—è: " + String.format("%.1f, %.1f, %.1f", returnPoint.x, returnPoint.y, returnPoint.z)).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ü–æ–≤–æ—Ä–æ—Ç: " + String.format("%.1f¬∞, %.1f¬∞", returnPoint.yaw, returnPoint.pitch)).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–†–µ–∂–∏–º –∏–≥—Ä—ã: " + returnPoint.gameMode.name()).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race return –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    private static int teleportToPlayer(CommandContext<ServerCommandSource> ctx, String playerName) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(playerName);
        if (target == null) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + playerName).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü–†–û–í–ï–†–ö–ê: –¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –º–∏—Ä–µ
        String targetWorld = target.getServerWorld().getRegistryKey().getValue().toString();
        if (!targetWorld.startsWith("fabric_race:")) {
            source.sendFeedback(() -> Text.literal("–¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –º–∏—Ä–µ!").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        try {
            race.server.world.ReturnPointRegistry.forceSetReturnPoint(player);
            
            String currentWorld = player.getServerWorld().getRegistryKey().getValue().toString();
            source.sendFeedback(() -> Text.literal("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + currentWorld).formatted(net.minecraft.util.Formatting.GRAY), false);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–µ–π
            try {
                var world = target.getServerWorld();
                var chunkPos = new net.minecraft.util.math.ChunkPos(
                    (int) Math.floor(target.getX()) >> 4,
                    (int) Math.floor(target.getZ()) >> 4
                );
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ —Å –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
                world.getChunk(chunkPos.x, chunkPos.z, net.minecraft.world.chunk.ChunkStatus.FULL, true);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —á–∞–Ω–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                for (int dx = -1; dx <= 1; dx++) {
                    for (int dz = -1; dz <= 1; dz++) {
                        world.getChunk(chunkPos.x + dx, chunkPos.z + dz, net.minecraft.world.chunk.ChunkStatus.FULL, true);
                    }
                }
            } catch (Exception e) {
                source.sendFeedback(() -> Text.literal("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞–Ω–∫–∏").formatted(net.minecraft.util.Formatting.YELLOW), false);
            }
            
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–µ–π
        try {
            var world = target.getServerWorld();
            var pos = target.getBlockPos();
            var chunk = world.getChunk(pos.getX() >> 4, pos.getZ() >> 4, net.minecraft.world.chunk.ChunkStatus.FULL, true);
            if (chunk != null) {
                LOGGER.info("[Race] Chunk loaded successfully for teleportation");
            }
        } catch (Exception e) {
            LOGGER.warn("[Race] Failed to preload chunk for teleportation: {}", e.getMessage());
        }
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –∫ —Ü–µ–ª–∏
        player.teleport(target.getServerWorld(), target.getX(), target.getY(), target.getZ(), 
                       target.getYaw(), target.getPitch());
        
        source.sendFeedback(() -> Text.literal("–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫ –∏–≥—Ä–æ–∫—É: " + playerName).formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }

    // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π join —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Ü–µ–ª–∏ (5 —Å–µ–∫—É–Ω–¥)
    private static int delayedJoin(CommandContext<ServerCommandSource> ctx, String playerName) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(playerName);
        if (target == null) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + playerName).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü–†–û–í–ï–†–ö–ê: –¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –º–∏—Ä–µ
        String targetWorld = target.getServerWorld().getRegistryKey().getValue().toString();
        if (!targetWorld.startsWith("fabric_race:")) {
            source.sendFeedback(() -> Text.literal("–¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –º–∏—Ä–µ!").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
        try {
            target.sendMessage(Text.literal("‚ö† " + player.getName().getString() + " —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥!").formatted(net.minecraft.util.Formatting.YELLOW), false);
            target.sendMessage(Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å").formatted(net.minecraft.util.Formatting.GRAY), false);
        } catch (Throwable ignored) {}
        
        // 5 —Å–µ–∫ = ~100 —Ç–∏–∫–æ–≤
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –≤–º–µ—Å—Ç–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            var pendingJoins = race.server.RaceServerInit.getPendingJoins();
            var pendingJoin = new race.server.RaceServerInit.PendingJoin(target.getUuid(), 100);
            pendingJoins.put(player.getUuid(), pendingJoin);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å join-–∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É
            try {
                net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking.send(player, new race.net.JoinRequestStatusPayload(true, playerName));
            } catch (Throwable ignored) {}
        } catch (Throwable t) {
            // –§–æ–ª–±—ç–∫ ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π join
            teleportToPlayer(ctx, playerName);
            return 1;
        }
        source.sendFeedback(() -> Text.literal("–û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫ " + playerName).formatted(net.minecraft.util.Formatting.GRAY), false);
        return 1;
    }
    
    private static int cancelJoin(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –≤–º–µ—Å—Ç–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            var pendingJoins = race.server.RaceServerInit.getPendingJoins();
            var removed = pendingJoins.remove(player.getUuid());
            if (removed != null) {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ü–µ–ª—å –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω
                try {
                    ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(removed.target());
                    if (target != null) {
                        target.sendMessage(Text.literal("‚ùå " + player.getName().getString() + " –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ").formatted(net.minecraft.util.Formatting.RED), false);
                    }
                } catch (Throwable ignored) {}
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã join-–∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É
                try {
                    net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking.send(player, new race.net.JoinRequestStatusPayload(false, ""));
                } catch (Throwable ignored) {}
                
                source.sendFeedback(() -> Text.literal("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ë–Ω").formatted(net.minecraft.util.Formatting.GREEN), false);
                return 1;
            } else {
                source.sendFeedback(() -> Text.literal("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ").formatted(net.minecraft.util.Formatting.YELLOW), false);
                return 0;
            }
        } catch (Throwable t) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    private static int showLeaderboard(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        source.sendFeedback(() -> Text.literal("=== –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
        
        var players = RacePhaseManager.getRaceBoardData(source.getServer());
        for (int i = 0; i < players.size(); i++) {
            var player = players.get(i);
            final String position = (i + 1) + ". "; // –î–µ–ª–∞–µ–º final –¥–ª—è –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
            final String time = formatTime(player.rtaMs()); // –î–µ–ª–∞–µ–º final –¥–ª—è –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
            final String stage = player.stage(); // –î–µ–ª–∞–µ–º final –¥–ª—è –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
            final String playerName = player.name(); // –î–µ–ª–∞–µ–º final –¥–ª—è –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
            
            source.sendFeedback(() -> Text.literal(position + playerName + " - " + time + " [" + stage + "]")
                .formatted(net.minecraft.util.Formatting.WHITE), false);
        }
        
        return 1;
    }
    
    private static int showHelp(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        source.sendFeedback(() -> Text.literal("=== –ö–æ–º–∞–Ω–¥—ã –≥–æ–Ω–∫–∏ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
        source.sendFeedback(() -> Text.literal("/race start - –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–Ω–∫—É").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race lobby - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race setup <seed> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–¥").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race spectate <player> - –ù–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º (—Ä–µ–∂–∏–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è)").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race return - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–π –º–∏—Ä/—Ç–æ—á–∫—É").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race returnpoint - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race teleport <player> - –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–≥—Ä–æ–∫—É").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race replays - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race ranking - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race tps - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TPS").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race auto - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π").formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("/race ghost - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–∑—Ä–∞–∫–æ–≤").formatted(net.minecraft.util.Formatting.WHITE), false);
        
        return 1;
    }
    

    

    
    private static String formatTime(long milliseconds) {
        long seconds = milliseconds / 1000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        long hours = minutes / 60;
        minutes = minutes % 60;
        
        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%d:%02d", minutes, seconds);
        }
    }

    private static int toggleGhosts(CommandContext<ServerCommandSource> ctx, boolean enable) {
        ServerCommandSource source = ctx.getSource();
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        race.server.RaceServerInit.setDisplayParallelPlayers(enable);
        source.sendFeedback(() -> Text.literal("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: " + (enable ? "ON" : "OFF")).formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    // === –ö–û–ú–ê–ù–î–´ –•–ê–ë–ê ===
    
    /**
     * –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ö–∞–±
     */
    private static int goToHub(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ —Ö–∞–±").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        HubManager.teleportToHub(player);
        return 1;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    private static int setSeed(CommandContext<ServerCommandSource> ctx, long seed) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Å–∏–¥").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–∏–¥ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ (–ø–æ –ª–∏–¥–µ—Ä—É)
        try {
            race.hub.HubManager.setTeamSeedChoice(source.getServer(), player.getUuid(), seed);
        } catch (Throwable t) {
            HubManager.setPlayerSeedChoice(player.getUuid(), seed);
        }
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏–¥, —á—Ç–æ–±—ã JOIN-–∫–æ–¥ –º–æ–≥ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∏—Ä
        race.server.world.ServerRaceConfig.GLOBAL_SEED = seed;
        source.sendFeedback(() -> Text.literal("–°–∏–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + seed).formatted(net.minecraft.util.Formatting.GREEN), false);
        source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–æ–≤ —Å —ç—Ç–∏–º —Å–∏–¥–æ–º: " + HubManager.getSeedPlayerCount(seed)).formatted(net.minecraft.util.Formatting.AQUA), false);
        source.sendFeedback(() -> Text.literal("–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /race ready –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –º–∏—Ä–∞").formatted(net.minecraft.util.Formatting.YELLOW), false);
        
        return 1;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥
     */
    private static int setRandomSeed(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Å–∏–¥").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        long randomSeed = System.currentTimeMillis() % 1000000; // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥
        return setSeed(ctx, randomSeed);
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ –∫ –≥–æ–Ω–∫–µ
     */
    private static int readyForRace(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≥–æ–Ω–∫–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        UUID playerId = player.getUuid();
        long seed = HubManager.getPlayerSeedChoice(playerId);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ -1 (–Ω–µ –≤—ã–±—Ä–∞–Ω)
        if (seed == -1) {
            source.sendFeedback(() -> Text.literal("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–¥ –∫–æ–º–∞–Ω–¥–æ–π /race seed <—á–∏—Å–ª–æ>").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
        boolean alreadyInRaceWorld = player.getServerWorld().getRegistryKey().getValue().toString().startsWith("fabric_race:");
        
        if (alreadyInRaceWorld) {
            source.sendFeedback(() -> Text.literal("–í—ã —É–∂–µ –≤ –ª–∏—á–Ω–æ–º –º–∏—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race join <–∏–≥—Ä–æ–∫> –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º.").formatted(net.minecraft.util.Formatting.YELLOW), false);
            return 1;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å —ç—Ç–∏–º —Å–∏–¥–æ–º
        int playerCount = HubManager.getSeedPlayerCount(seed);
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏ –¥–∞–∂–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (playerCount >= 0) {
            // –ø–æ–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞ –Ω–∞ dedicated)
            race.hub.HubManager.markReady(player.getUuid());
            
            // –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–∏—Ä, –∑–∞—Ç–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            try {
                var personalWorld = race.server.world.EnhancedWorldManager.getOrCreateWorld(
                    source.getServer(), player.getUuid(), seed, net.minecraft.world.World.OVERWORLD);
            if (personalWorld != null) {
                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —á–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–µ–π
                race.server.world.SpawnCache.warmupAndCache(personalWorld, personalWorld.getSpawnPos(), 2);
                
                // –£–ü–†–û–©–ï–ù–ò–ï: –ú–∏–∫—Å–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç null —á–∞–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ

                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä
                race.tp.SafeTeleport.toWorldSpawn(player, personalWorld);
                    race.hub.HubManager.setLastWorldSeed(player.getUuid(), seed);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                    race.server.world.ReturnPointRegistry.saveCurrent(player);
                    
                    source.sendFeedback(() -> Text.literal("–í—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race go –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏.").formatted(net.minecraft.util.Formatting.GREEN), false);
                    LOGGER.info("[Race] Player ready - teleported to personal world: {} -> {}", 
                              player.getName().getString(), seed);
                } else {
                    source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞").formatted(net.minecraft.util.Formatting.RED), false);
                }
            } catch (Throwable t) {
                source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: " + t.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
                LOGGER.warn("[Race] Error during ready teleport: {}", t.getMessage());
            }
        } else {
            source.sendFeedback(() -> Text.literal("–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–∏–¥–æ–º " + seed + "...").formatted(net.minecraft.util.Formatting.YELLOW), false);
        }
        
        return 1;
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç: –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö, –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    private static int personalGo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        ServerPlayerEntity issuer;
        try { issuer = source.getPlayer(); } catch (Exception e) { issuer = null; }

        // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö
        if (issuer != null) {
            java.util.UUID leaderId = race.hub.HubManager.getLeader(issuer.getUuid());
            java.util.List<java.util.UUID> members = race.hub.HubManager.getTeamMembers(leaderId);
            if (members == null || members.isEmpty()) members = java.util.List.of(leaderId);

            long seed = race.hub.HubManager.getPlayerSeedChoice(leaderId);
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ -1 (–Ω–µ –≤—ã–±—Ä–∞–Ω)
            if (seed == -1) seed = race.server.world.ServerRaceConfig.GLOBAL_SEED;
            if (seed == -1) {
                source.sendFeedback(() -> Text.literal("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–¥ (/race seed) –∏ –Ω–∞–∂–º–∏—Ç–µ Ready").formatted(net.minecraft.util.Formatting.YELLOW), false);
                return 0;
            }

            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–∏–¥ —É –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã
            try { race.hub.HubManager.setTeamSeedChoice(source.getServer(), leaderId, seed); } catch (Throwable ignored) {}
            // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç
            java.util.List<ServerPlayerEntity> targets = new java.util.ArrayList<>();
            for (ServerPlayerEntity p : source.getServer().getPlayerManager().getPlayerList()) {
                String ns = p.getServerWorld().getRegistryKey().getValue().getNamespace();
                if (!"fabric_race".equals(ns)) continue;
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
                try { p.changeGameMode(net.minecraft.world.GameMode.SURVIVAL); } catch (Throwable ignored) {}
                try { p.sendAbilitiesUpdate(); } catch (Throwable ignored) {}
                targets.add(p);
            }
            if (targets.isEmpty()) {
                source.sendFeedback(() -> Text.literal("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö –¥–ª—è —Å—Ç–∞—Ä—Ç–∞").formatted(net.minecraft.util.Formatting.YELLOW), false);
                return 0;
            }
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
            // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–ø–∞–≤–Ω–µ —Å–≤–æ–µ–≥–æ –º–∏—Ä–∞
            for (ServerPlayerEntity p : targets) { 
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–æ–º —Å–≤–æ–µ–≥–æ –º–∏—Ä–∞
                net.minecraft.util.math.BlockPos spawnPos = p.getServerWorld().getSpawnPos();
                double distanceToSpawn = p.getPos().distanceTo(net.minecraft.util.math.Vec3d.ofCenter(spawnPos));
                
                // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–æ–º (–≤ —Ä–∞–¥–∏—É—Å–µ 50 –±–ª–æ–∫–æ–≤)
                if (distanceToSpawn <= 50.0) {
                    race.server.RaceServerInit.freezePlayerUntilStart(p);
                } else {
                    // –ò–≥—Ä–æ–∫ –¥–∞–ª–µ–∫–æ –æ—Ç —Å–ø–∞–≤–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
                    p.sendMessage(Text.literal("üèÅ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä–∞—Ç—å.").formatted(net.minecraft.util.Formatting.GREEN), false);
                }
            }
            for (ServerPlayerEntity p : targets) { race.server.RaceServerInit.personalStart(p, seed); }
            try { race.server.RaceServerInit.startRace(seed, System.currentTimeMillis()); } catch (Throwable ignored) {}
            source.sendFeedback(() -> Text.literal("–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç!").formatted(net.minecraft.util.Formatting.GREEN), true);
            return 1;
        }

        // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–µ—Ç, –ø—Ä–µ–∂–Ω—è—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        java.util.List<ServerPlayerEntity> targets = new java.util.ArrayList<>();
        for (ServerPlayerEntity p : source.getServer().getPlayerManager().getPlayerList()) {
            String key = p.getServerWorld().getRegistryKey().getValue().getNamespace();
            if ("fabric_race".equals(key)) targets.add(p);
        }
        if (targets.isEmpty()) {
            source.sendFeedback(() -> Text.literal("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—Ç—É –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Ä–∞—Ö").formatted(net.minecraft.util.Formatting.YELLOW), false);
            return 0;
        }
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
        for (ServerPlayerEntity p : targets) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–æ–º —Å–≤–æ–µ–≥–æ –º–∏—Ä–∞
            net.minecraft.util.math.BlockPos spawnPos = p.getServerWorld().getSpawnPos();
            double distanceToSpawn = p.getPos().distanceTo(net.minecraft.util.math.Vec3d.ofCenter(spawnPos));
            
            // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–æ–º (–≤ —Ä–∞–¥–∏—É—Å–µ 50 –±–ª–æ–∫–æ–≤)
            if (distanceToSpawn <= 50.0) {
                race.server.RaceServerInit.freezePlayerUntilStart(p);
            } else {
                // –ò–≥—Ä–æ–∫ –¥–∞–ª–µ–∫–æ –æ—Ç —Å–ø–∞–≤–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
                p.sendMessage(Text.literal("üèÅ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä–∞—Ç—å.").formatted(net.minecraft.util.Formatting.GREEN), false);
            }
        }
        for (ServerPlayerEntity p : targets) {
            long s = race.hub.HubManager.getPlayerSeedChoice(p.getUuid());
            if (s < 0) s = race.server.world.ServerRaceConfig.GLOBAL_SEED;
            
            // –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–¥ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
            if (s <= 0) {
                p.sendMessage(net.minecraft.text.Text.literal("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–¥: /race seed <—á–∏—Å–ª–æ> –∏–ª–∏ /race setup <seed>")
                    .formatted(net.minecraft.util.Formatting.RED), false);
                continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            }
            
            race.server.RaceServerInit.personalStart(p, s);
        }
        try { race.server.RaceServerInit.startRace(race.server.world.ServerRaceConfig.GLOBAL_SEED, System.currentTimeMillis()); } catch (Throwable ignored) {}
        source.sendFeedback(() -> Text.literal("–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö!").formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–≥—Ä–æ–∫–æ–≤
     */
    private static int showGroupInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä—É–ø–ø—É").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        UUID playerId = player.getUuid();
        long seed = HubManager.getPlayerSeedChoice(playerId);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ -1 (–Ω–µ –≤—ã–±—Ä–∞–Ω)
        if (seed == -1) {
            source.sendFeedback(() -> Text.literal("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–¥ –∫–æ–º–∞–Ω–¥–æ–π /race seed <—á–∏—Å–ª–æ>").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        source.sendFeedback(() -> Text.literal("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
        source.sendFeedback(() -> Text.literal("–°–∏–¥: " + seed).formatted(net.minecraft.util.Formatting.WHITE), false);
        source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: " + HubManager.getSeedPlayerCount(seed)).formatted(net.minecraft.util.Formatting.WHITE), false);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        var groupPlayers = HubManager.getPlayersForSeed(seed);
        if (!groupPlayers.isEmpty()) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–∏:").formatted(net.minecraft.util.Formatting.YELLOW), false);
            int i = 1;
            for (UUID groupPlayerId : groupPlayers.keySet()) {
                ServerPlayerEntity groupPlayer = source.getServer().getPlayerManager().getPlayer(groupPlayerId);
                if (groupPlayer != null) {
                    final int index = i;
                    final String playerName = groupPlayer.getName().getString();
                    source.sendFeedback(() -> Text.literal(index + ". " + playerName).formatted(net.minecraft.util.Formatting.WHITE), false);
                    i++;
                }
            }
        }
        
        return 1;
    }
    
    private static int resetSeed(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–∏–¥").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏–¥ –∏–≥—Ä–æ–∫–∞
        race.hub.HubManager.setPlayerSeedChoice(player.getUuid(), -1);
        source.sendFeedback(() -> Text.literal("–°–∏–¥ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ö–∞–± –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–µ").formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }
    
    private static int clearReturnPoint(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
        race.server.world.ReturnPointRegistry.clear(player);
        source.sendFeedback(() -> Text.literal("–¢–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ö–∞–± –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è").formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }
    
    /**
     * –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏–¥–µ—Ä–∞)
     */
    private static int teamDisband(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        long seed = race.hub.HubManager.getPlayerSeedChoice(player.getUuid());
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ -1 (–Ω–µ –≤—ã–±—Ä–∞–Ω)
        if (seed == -1) {
            source.sendFeedback(() -> Text.literal("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
        UUID leaderId = race.hub.HubManager.getSeedLeader(seed);
        if (leaderId == null || !leaderId.equals(player.getUuid())) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        for (ServerPlayerEntity teamPlayer : source.getServer().getPlayerManager().getPlayerList()) {
            long playerSeed = race.hub.HubManager.getPlayerSeedChoice(teamPlayer.getUuid());
            if (playerSeed == seed) {
                teamPlayer.sendMessage(Text.literal("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏–¥–µ—Ä–æ–º " + player.getName().getString()).formatted(net.minecraft.util.Formatting.YELLOW), false);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–∏–¥–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                race.hub.HubManager.setPlayerSeedChoice(teamPlayer.getUuid(), -1);
            }
        }
        
        source.sendFeedback(() -> Text.literal("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞").formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É (–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
     */
    private static int teamLeave(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–æ–∫–∏–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ
        long seed = race.hub.HubManager.getPlayerSeedChoice(player.getUuid());
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ -1 (–Ω–µ –≤—ã–±—Ä–∞–Ω)
        if (seed == -1) {
            source.sendFeedback(() -> Text.literal("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ª–∏–¥–µ—Ä–æ–º
        UUID leaderId = race.hub.HubManager.getSeedLeader(seed);
        if (leaderId != null && leaderId.equals(player.getUuid())) {
            source.sendFeedback(() -> Text.literal("–õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race team disband –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–∏–¥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        if (leaderId != null) {
            ServerPlayerEntity leader = source.getServer().getPlayerManager().getPlayer(leaderId);
            if (leader != null) {
                leader.sendMessage(Text.literal("–ò–≥—Ä–æ–∫ " + player.getName().getString() + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.YELLOW), false);
            }
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        for (ServerPlayerEntity teamPlayer : source.getServer().getPlayerManager().getPlayerList()) {
            if (teamPlayer == player) continue;
            long playerSeed = race.hub.HubManager.getPlayerSeedChoice(teamPlayer.getUuid());
            if (playerSeed == seed) {
                teamPlayer.sendMessage(Text.literal("–ò–≥—Ä–æ–∫ " + player.getName().getString() + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.YELLOW), false);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        race.hub.HubManager.setPlayerSeedChoice(player.getUuid(), -1);
        source.sendFeedback(() -> Text.literal("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.GREEN), false);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–±–µ
     */
    private static int showHubInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            String hubInfo = race.hub.HubManager.getHubInfo();
            source.sendFeedback(() -> Text.literal("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞–±–µ:").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal(hubInfo).formatted(net.minecraft.util.Formatting.AQUA), false);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (race.hub.HubManager.isHubActive()) {
                source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω").formatted(net.minecraft.util.Formatting.GREEN), false);
            } else {
                source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω").formatted(net.minecraft.util.Formatting.RED), false);
            }
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∞–±–µ: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ö–∞–±–∞
     */
    private static int saveHubData(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            race.hub.HubManager.forceSaveHubData();
            source.sendFeedback(() -> Text.literal("–î–∞–Ω–Ω—ã–µ —Ö–∞–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã").formatted(net.minecraft.util.Formatting.GREEN), false);
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–∞–±–∞: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    private static int showPerformance(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            MinecraftServer server = source.getServer();
            int playerCount = server.getPlayerManager().getPlayerList().size();
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            long memoryUsed = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            long memoryMax = Runtime.getRuntime().maxMemory();
            long memoryFree = Runtime.getRuntime().freeMemory();
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            double memoryUsagePercent = (double) memoryUsed / memoryMax * 100;
            
            source.sendFeedback(() -> Text.literal("=== –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: " + playerCount).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ü–∞–º—è—Ç—å: " + (memoryUsed / 1024 / 1024) + "MB / " + (memoryMax / 1024 / 1024) + "MB (" + String.format("%.1f", memoryUsagePercent) + "%)").formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–°–≤–æ–±–æ–¥–Ω–æ: " + (memoryFree / 1024 / 1024) + "MB").formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (memoryUsagePercent > 80) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞").formatted(net.minecraft.util.Formatting.RED), false);
            } else if (playerCount > 8) {
                source.sendFeedback(() -> Text.literal("‚ÑπÔ∏è –ú–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π").formatted(net.minecraft.util.Formatting.YELLOW), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ").formatted(net.minecraft.util.Formatting.GREEN), false);
            }
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TPS
     */
    private static int toggleTpsDisplay(CommandContext<ServerCommandSource> ctx, boolean enable) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            ServerPlayerEntity p = source.getPlayer();
            if (p != null && source.getServer().getPlayerManager().isOperator(p.getGameProfile())) {
                race.server.RaceServerInit.setTpsDisplayEnabled(enable);
                source.sendFeedback(() -> Text.literal("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TPS: " + (enable ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.GREEN), true);
                return 1;
            }
        } catch (Throwable ignored) {}
        
        race.server.RaceServerInit.setTpsDisplayEnabled(enable);
        source.sendFeedback(() -> Text.literal("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TPS: " + (enable ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TPS
     */
    private static int showTpsInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            double currentTPS = race.server.RaceServerInit.getCurrentTPS();
            boolean tpsEnabled = race.server.RaceServerInit.isTpsDisplayEnabled();
            String performanceStatus = race.server.RaceServerInit.getPerformanceStatus();
            int performanceLevel = race.server.RaceServerInit.getPerformanceLevel();
            
            source.sendFeedback(() -> Text.literal("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TPS ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π TPS: " + String.format("%.2f", currentTPS)).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + (tpsEnabled ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: " + performanceStatus).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏: " + performanceLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            boolean autoEnabled = race.server.RaceServerInit.isAutoOptimizationEnabled();
            int autoLevel = race.server.RaceServerInit.getAutoOptimizationLevel();
            source.sendFeedback(() -> Text.literal("–ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: " + (autoEnabled ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê") + " (—É—Ä–æ–≤–µ–Ω—å " + autoLevel + ")").formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (currentTPS >= 19.5) {
                source.sendFeedback(() -> Text.literal("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å").formatted(net.minecraft.util.Formatting.GREEN), false);
            } else if (currentTPS >= 18.0) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å").formatted(net.minecraft.util.Formatting.YELLOW), false);
            } else if (currentTPS >= 15.0) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å").formatted(net.minecraft.util.Formatting.YELLOW), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚ùå –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω—ã –ª–∞–≥–∏").formatted(net.minecraft.util.Formatting.RED), false);
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (performanceLevel == 2) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏").formatted(net.minecraft.util.Formatting.RED), false);
            } else if (performanceLevel == 1) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω—ã —É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏").formatted(net.minecraft.util.Formatting.YELLOW), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞").formatted(net.minecraft.util.Formatting.GREEN), false);
            }
            
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race tps on/off –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TPS: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
     */
    private static int toggleAutoOptimization(CommandContext<ServerCommandSource> ctx, boolean enable) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            ServerPlayerEntity p = source.getPlayer();
            if (p != null && source.getServer().getPlayerManager().isOperator(p.getGameProfile())) {
                race.server.RaceServerInit.setAutoOptimizationEnabled(enable);
                source.sendFeedback(() -> Text.literal("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: " + (enable ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê")).formatted(net.minecraft.util.Formatting.GREEN), true);
                return 1;
            }
        } catch (Throwable ignored) {}
        
        race.server.RaceServerInit.setAutoOptimizationEnabled(enable);
        source.sendFeedback(() -> Text.literal("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: " + (enable ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê")).formatted(net.minecraft.util.Formatting.GREEN), true);
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    private static int showAutoOptimizationInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            boolean autoEnabled = race.server.RaceServerInit.isAutoOptimizationEnabled();
            int autoLevel = race.server.RaceServerInit.getAutoOptimizationLevel();
            double currentTPS = race.server.RaceServerInit.getCurrentTPS();
            String performanceStatus = race.server.RaceServerInit.getPerformanceStatus();
            
            source.sendFeedback(() -> Text.literal("=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å: " + (autoEnabled ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê")).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: " + autoLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π TPS: " + String.format("%.2f", currentTPS)).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: " + performanceStatus).formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            source.sendFeedback(() -> Text.literal("=== –£—Ä–æ–≤–Ω–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ===").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 0: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞").formatted(net.minecraft.util.Formatting.GREEN), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 1: –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (GC)").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 2: –°—Ä–µ–¥–Ω—è—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (GC + –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π)").formatted(net.minecraft.util.Formatting.LIGHT_PURPLE), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)").formatted(net.minecraft.util.Formatting.RED), false);
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if (currentTPS < 16.0) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –ù–∏–∑–∫–∏–π TPS - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏").formatted(net.minecraft.util.Formatting.RED), false);
            } else if (currentTPS > 19.0) {
                source.sendFeedback(() -> Text.literal("‚úÖ –í—ã—Å–æ–∫–∏–π TPS - —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏").formatted(net.minecraft.util.Formatting.GREEN), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚úÖ TPS –≤ –Ω–æ—Ä–º–µ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ").formatted(net.minecraft.util.Formatting.GREEN), false);
            }
            
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race auto on/off –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
     */
    private static int setGhostQuality(CommandContext<ServerCommandSource> ctx, int level) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            race.server.RaceServerInit.setGhostQualityLevel(level);
            String qualityName = switch (level) {
                case 0 -> "–û—Ç–∫–ª—é—á–µ–Ω–æ";
                case 1 -> "–ù–∏–∑–∫–æ–µ";
                case 2 -> "–°—Ä–µ–¥–Ω–µ–µ";
                case 3 -> "–í—ã—Å–æ–∫–æ–µ";
                default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            };
            source.sendFeedback(() -> Text.literal("–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + qualityName + " (—É—Ä–æ–≤–µ–Ω—å " + level + ")").formatted(net.minecraft.util.Formatting.GREEN), true);
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
     */
    private static int toggleGhostAdaptive(CommandContext<ServerCommandSource> ctx, boolean enable) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            race.server.RaceServerInit.setAdaptiveGhostQuality(enable);
            source.sendFeedback(() -> Text.literal("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤: " + (enable ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.GREEN), true);
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
     */
    private static int showGhostQualityInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            int currentLevel = race.server.RaceServerInit.getGhostQualityLevel();
            boolean adaptive = race.server.RaceServerInit.isAdaptiveGhostQuality();
            int adaptiveLevel = race.server.RaceServerInit.getAdaptiveGhostQuality();
            
            source.sendFeedback(() -> Text.literal("=== –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: " + currentLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: " + (adaptive ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: " + adaptiveLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
            source.sendFeedback(() -> Text.literal("=== –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ ===").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 0: –û—Ç–∫–ª—é—á–µ–Ω–æ (0% —á–∞—Å—Ç–∏—Ü)").formatted(net.minecraft.util.Formatting.RED), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 1: –ù–∏–∑–∫–æ–µ (25% —á–∞—Å—Ç–∏—Ü)").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 2: –°—Ä–µ–¥–Ω–µ–µ (50% —á–∞—Å—Ç–∏—Ü)").formatted(net.minecraft.util.Formatting.LIGHT_PURPLE), false);
            source.sendFeedback(() -> Text.literal("–£—Ä–æ–≤–µ–Ω—å 3: –í—ã—Å–æ–∫–æ–µ (100% —á–∞—Å—Ç–∏—Ü)").formatted(net.minecraft.util.Formatting.GREEN), false);
            
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race ghost quality <0-3> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
     */
    private static int showGhostAdaptiveInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            boolean adaptive = race.server.RaceServerInit.isAdaptiveGhostQuality();
            int adaptiveLevel = race.server.RaceServerInit.getAdaptiveGhostQuality();
            double currentTPS = race.server.RaceServerInit.getCurrentTPS();
            
            source.sendFeedback(() -> Text.literal("=== –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–°—Ç–∞—Ç—É—Å: " + (adaptive ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: " + adaptiveLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π TPS: " + String.format("%.2f", currentTPS)).formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            source.sendFeedback(() -> Text.literal("=== –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ ===").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("TPS < 15.0: –£—Ä–æ–≤–µ–Ω—å 0 (–æ—Ç–∫–ª—é—á–µ–Ω–æ)").formatted(net.minecraft.util.Formatting.RED), false);
            source.sendFeedback(() -> Text.literal("TPS < 18.0: –£—Ä–æ–≤–µ–Ω—å 1 (–Ω–∏–∑–∫–æ–µ)").formatted(net.minecraft.util.Formatting.YELLOW), false);
            source.sendFeedback(() -> Text.literal("TPS < 19.5: –£—Ä–æ–≤–µ–Ω—å 2 (—Å—Ä–µ–¥–Ω–µ–µ)").formatted(net.minecraft.util.Formatting.LIGHT_PURPLE), false);
            source.sendFeedback(() -> Text.literal("TPS >= 19.5: –£—Ä–æ–≤–µ–Ω—å 3 (–≤—ã—Å–æ–∫–æ–µ)").formatted(net.minecraft.util.Formatting.GREEN), false);
            
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race ghost adaptive on/off –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑—Ä–∞–∫–∞—Ö
     */
    private static int showGhostInfo(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            int currentLevel = race.server.RaceServerInit.getGhostQualityLevel();
            boolean adaptive = race.server.RaceServerInit.isAdaptiveGhostQuality();
            int adaptiveLevel = race.server.RaceServerInit.getAdaptiveGhostQuality();
            double currentTPS = race.server.RaceServerInit.getCurrentTPS();
            
            source.sendFeedback(() -> Text.literal("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑—Ä–∞–∫–∞—Ö ===").formatted(net.minecraft.util.Formatting.GOLD), false);
            source.sendFeedback(() -> Text.literal("–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: " + currentLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: " + (adaptive ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û")).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: " + adaptiveLevel).formatted(net.minecraft.util.Formatting.WHITE), false);
            source.sendFeedback(() -> Text.literal("–¢–µ–∫—É—â–∏–π TPS: " + String.format("%.2f", currentTPS)).formatted(net.minecraft.util.Formatting.WHITE), false);
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if (currentTPS < 15.0) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –ù–∏–∑–∫–∏–π TPS - –ø—Ä–∏–∑—Ä–∞–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏").formatted(net.minecraft.util.Formatting.RED), false);
            } else if (currentTPS < 18.0) {
                source.sendFeedback(() -> Text.literal("‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π TPS - –ø—Ä–∏–∑—Ä–∞–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∂–∏–º–µ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞").formatted(net.minecraft.util.Formatting.YELLOW), false);
            } else if (currentTPS < 19.5) {
                source.sendFeedback(() -> Text.literal("‚úÖ –•–æ—Ä–æ—à–∏–π TPS - –ø—Ä–∏–∑—Ä–∞–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –∫–∞—á–µ—Å—Ç–≤–µ").formatted(net.minecraft.util.Formatting.LIGHT_PURPLE), false);
            } else {
                source.sendFeedback(() -> Text.literal("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π TPS - –ø—Ä–∏–∑—Ä–∞–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ").formatted(net.minecraft.util.Formatting.GREEN), false);
            }
            
            source.sendFeedback(() -> Text.literal("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race ghost quality –∏ /race ghost adaptive –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏").formatted(net.minecraft.util.Formatting.GRAY), false);
            
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑—Ä–∞–∫–∞—Ö: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ —Å–µ–±—è
     */
    private static int forceUnfreezeSelf(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity)) {
            source.sendFeedback(() -> Text.literal("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        ServerPlayerEntity player = (ServerPlayerEntity) source.getEntity();
        
        try {
            if (race.server.RaceServerInit.isFrozen(player.getUuid())) {
                race.server.RaceServerInit.forceUnfreezePlayer(player);
                source.sendFeedback(() -> Text.literal("–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã").formatted(net.minecraft.util.Formatting.GREEN), false);
                return 1;
            } else {
                source.sendFeedback(() -> Text.literal("–í—ã –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã").formatted(net.minecraft.util.Formatting.YELLOW), false);
                return 0;
            }
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    private static int forceUnfreezeAll(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            MinecraftServer server = source.getServer();
            race.server.RaceServerInit.forceUnfreezeAllPlayers(server);
            source.sendFeedback(() -> Text.literal("–í—Å–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã").formatted(net.minecraft.util.Formatting.GREEN), false);
            return 1;
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
    }
    
    // ========== –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ï–ú ==========
    
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    private static int clearRaceState(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        try {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –∏–≥—Ä–æ–∫–∞
            race.hub.HubManager.clearPlayerChoice(player.getUuid());
            
            source.sendFeedback(() -> Text.literal("–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ –¥–ª—è " + player.getName().getString())
                .formatted(net.minecraft.util.Formatting.GREEN), false);
            
            player.sendMessage(Text.literal("–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É.")
                .formatted(net.minecraft.util.Formatting.GREEN), false);
                
        } catch (Throwable t) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " + t.getMessage())
                .formatted(net.minecraft.util.Formatting.RED), false);
        }
        return 1;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    private static int clearAllRaceState(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        try {
            int clearedCount = 0;
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (ServerPlayerEntity player : source.getServer().getPlayerManager().getPlayerList()) {
                race.hub.HubManager.clearPlayerChoice(player.getUuid());
                clearedCount++;
            }

            int finalClearedCount = clearedCount;
            source.sendFeedback(() -> Text.literal("–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ –¥–ª—è " + finalClearedCount + " –∏–≥—Ä–æ–∫–æ–≤")
                .formatted(net.minecraft.util.Formatting.GREEN), true);
                
        } catch (Throwable t) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " + t.getMessage())
                .formatted(net.minecraft.util.Formatting.RED), false);
        }
        return 1;
    }
    
    private static int debugReturnPoint(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            return 0;
        }

        race.server.world.ReturnPointRegistry.ReturnPoint rp = 
            race.server.world.ReturnPointRegistry.peek(player.getUuid());
        
        if (rp == null) {
            source.sendFeedback(() -> Text.literal("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞").formatted(net.minecraft.util.Formatting.RED), false);
        } else {
            source.sendFeedback(() -> Text.literal("–¢–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + rp.worldKey.getValue() + 
                                                  " (" + String.format("%.1f, %.1f, %.1f", rp.x, rp.y, rp.z) + ")").formatted(net.minecraft.util.Formatting.GREEN), false);
            source.sendFeedback(() -> Text.literal("–†–µ–∂–∏–º –∏–≥—Ä—ã: " + rp.gameMode.name()).formatted(net.minecraft.util.Formatting.WHITE), false);
        }
        
        return 1;
    }
    
    // –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è RaceTimeCommands
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∏—Ä –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –¥–ª—è –≤—Ö–æ–¥–∞
     */
    private static int setPreferredWorld(CommandContext<ServerCommandSource> ctx) throws CommandSyntaxException {
        ServerPlayerEntity player = ctx.getSource().getPlayerOrThrow();
        ServerWorld world = player.getServerWorld();
        
        if (!world.getRegistryKey().getValue().getNamespace().equals("fabric_race")) {
            ctx.getSource().sendError(Text.literal("–ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π"));
            return 0;
        }
        
        race.server.world.PreferredWorldRegistry.setPreferred(player.getUuid(), world.getRegistryKey());
        ctx.getSource().sendFeedback(() -> Text.literal("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–∏—Ä: " + world.getRegistryKey().getValue()), true);
        return 1;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–∏—Ä
     */
    private static int clearPreferredWorld(CommandContext<ServerCommandSource> ctx) throws CommandSyntaxException {
        ServerPlayerEntity player = ctx.getSource().getPlayerOrThrow();
        
        race.server.world.PreferredWorldRegistry.clear(player.getUuid());
        ctx.getSource().sendFeedback(() -> Text.literal("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–∏—Ä –æ—á–∏—â–µ–Ω"), true);
        return 1;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –¥—ã–º–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    private static int forceEnableGhosts(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –¥—ã–º–∫—É
        race.server.RaceServerInit.setDisplayParallelPlayers(true);
        race.server.RaceServerInit.setGhostQualityLevel(3); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        race.server.RaceServerInit.setAdaptiveGhostQuality(false); // –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        source.sendFeedback(() -> Text.literal("–î—ã–º–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞—á–µ—Å—Ç–≤–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ)").formatted(net.minecraft.util.Formatting.GREEN), true);
        source.sendFeedback(() -> Text.literal("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏").formatted(net.minecraft.util.Formatting.YELLOW), false);
        
        return 1;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥—ã–º–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    private static int showGhostStatus(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        boolean enabled = race.server.RaceServerInit.isDisplayParallelPlayers();
        int quality = race.server.RaceServerInit.getGhostQualityLevel();
        boolean adaptive = race.server.RaceServerInit.isAdaptiveGhostQuality();
        double tps = race.server.RaceServerInit.getCurrentTPS();
        
        source.sendFeedback(() -> Text.literal("=== –°—Ç–∞—Ç—É—Å –¥—ã–º–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ ===").formatted(net.minecraft.util.Formatting.GOLD), false);
        source.sendFeedback(() -> Text.literal("–í–∫–ª—é—á–µ–Ω–∞: " + (enabled ? "–î–ê" : "–ù–ï–¢")).formatted(enabled ? net.minecraft.util.Formatting.GREEN : net.minecraft.util.Formatting.RED), false);
        source.sendFeedback(() -> Text.literal("–ö–∞—á–µ—Å—Ç–≤–æ: " + quality + " (0=–æ—Ç–∫–ª—é—á–µ–Ω–æ, 1=–Ω–∏–∑–∫–æ–µ, 2=—Å—Ä–µ–¥–Ω–µ–µ, 3=–≤—ã—Å–æ–∫–æ–µ)").formatted(net.minecraft.util.Formatting.YELLOW), false);
        source.sendFeedback(() -> Text.literal("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ: " + (adaptive ? "–î–ê" : "–ù–ï–¢")).formatted(adaptive ? net.minecraft.util.Formatting.GREEN : net.minecraft.util.Formatting.RED), false);
        source.sendFeedback(() -> Text.literal("TPS: " + String.format("%.2f", tps)).formatted(net.minecraft.util.Formatting.AQUA), false);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        int playerCount = source.getServer().getPlayerManager().getPlayerList().size();
        source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: " + playerCount).formatted(net.minecraft.util.Formatting.AQUA), false);
        
        if (source.getEntity() instanceof ServerPlayerEntity player) {
            String worldKey = player.getServerWorld().getRegistryKey().getValue().toString();
            source.sendFeedback(() -> Text.literal("–í–∞—à –º–∏—Ä: " + worldKey).formatted(net.minecraft.util.Formatting.AQUA), false);
            source.sendFeedback(() -> Text.literal("–í –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ: " + (worldKey.startsWith("fabric_race:") ? "–î–ê" : "–ù–ï–¢")).formatted(worldKey.startsWith("fabric_race:") ? net.minecraft.util.Formatting.GREEN : net.minecraft.util.Formatting.RED), false);
        }
        
        if (enabled && quality > 0) {
            source.sendFeedback(() -> Text.literal("‚úÖ –î—ã–º–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!").formatted(net.minecraft.util.Formatting.GREEN), false);
        } else {
            source.sendFeedback(() -> Text.literal("‚ùå –î—ã–º–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ = 0").formatted(net.minecraft.util.Formatting.RED), false);
        }
        
        return 1;
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥—ã–º–∫–∏ —Ö–æ—Å—Ç—É
     */
    private static int testGhostTrail(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—ã–º–∫—É").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª–µ–¥
        var testPoints = new java.util.ArrayList<race.net.GhostTrailPayload.Point>();
        testPoints.add(new race.net.GhostTrailPayload.Point(player.getX(), player.getY(), player.getZ()));
        testPoints.add(new race.net.GhostTrailPayload.Point(player.getX() + 1, player.getY(), player.getZ()));
        testPoints.add(new race.net.GhostTrailPayload.Point(player.getX() + 2, player.getY(), player.getZ()));
        
        var payload = new race.net.GhostTrailPayload("test_player", "–¢–µ—Å—Ç –¥—ã–º–∫–∏", testPoints);
        net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking.send(player, payload);
        
        source.sendFeedback(() -> Text.literal("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª–µ–¥ –¥—ã–º–∫–∏").formatted(net.minecraft.util.Formatting.GREEN), true);
        source.sendFeedback(() -> Text.literal("–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –¥—ã–º–∫—É - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!").formatted(net.minecraft.util.Formatting.YELLOW), false);
        
        return 1;
    }

    private static int unfreezePlayer(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
        race.server.RaceServerInit.forceUnfreezePlayer(player);
        
        source.sendFeedback(() -> Text.literal("–í—ã —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ª–æ–º–∞—Ç—å –±–ª–æ–∫–∏").formatted(net.minecraft.util.Formatting.GREEN), true);
        
        return 1;
    }
    
    private static int unfreezeAllPlayers(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        race.server.RaceServerInit.forceUnfreezeAllPlayers(source.getServer());
        
        source.sendFeedback(() -> Text.literal("–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã!").formatted(net.minecraft.util.Formatting.GREEN), true);
        
        return 1;
    }
    
    private static int showLobbyList(CommandContext<ServerCommandSource> ctx) {
        ServerCommandSource source = ctx.getSource();
        ServerPlayerEntity player = source.getPlayer();
        
        if (player == null) {
            source.sendFeedback(() -> Text.literal("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º!").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –∏–≥—Ä–æ–∫—É
        race.server.RaceServerInit.invokeSendLobbyList(player);
        source.sendFeedback(() -> Text.literal("–°–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!").formatted(net.minecraft.util.Formatting.GREEN), false);
        
        return 1;
    }

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–æ–Ω–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∏—Ä —Å —Ç–µ–º –∂–µ —Å–∏–¥–æ–º –Ω–æ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
    private static int parallelRace(CommandContext<ServerCommandSource> ctx, String targetPlayerName) {
        ServerCommandSource source = ctx.getSource();
        
        if (!(source.getEntity() instanceof ServerPlayerEntity player)) {
            source.sendFeedback(() -> Text.literal("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥–æ–Ω–∫–∏").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
        boolean alreadyInRaceWorld = player.getServerWorld().getRegistryKey().getValue().toString().startsWith("fabric_race:");
        if (alreadyInRaceWorld) {
            source.sendFeedback(() -> Text.literal("–í—ã —É–∂–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º.").formatted(net.minecraft.util.Formatting.YELLOW), false);
            return 1;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        ServerPlayerEntity target = source.getServer().getPlayerManager().getPlayer(targetPlayerName);
        if (target == null) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ " + targetPlayerName + " –Ω–µ –Ω–∞–π–¥–µ–Ω").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–∏–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        long targetSeed = race.hub.HubManager.getPlayerSeedChoice(target.getUuid());
        if (targetSeed < 0) {
            source.sendFeedback(() -> Text.literal("–£ –∏–≥—Ä–æ–∫–∞ " + targetPlayerName + " –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–¥").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
        String targetWorldName = target.getServerWorld().getRegistryKey().getValue().toString();
        if (!targetWorldName.startsWith("fabric_race:")) {
            source.sendFeedback(() -> Text.literal("–ò–≥—Ä–æ–∫ " + targetPlayerName + " –Ω–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ").formatted(net.minecraft.util.Formatting.RED), false);
            return 0;
        }
        
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Å–∏–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            race.hub.HubManager.setPlayerSeedChoice(player.getUuid(), targetSeed);
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            int freeSlot = race.server.world.EnhancedWorldManager.findFirstFreeSlotForSeed(source.getServer(), targetSeed);
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–∏—Ä —Å —Ç–µ–º –∂–µ —Å–∏–¥–æ–º –Ω–æ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
            var parallelWorld = race.server.world.EnhancedWorldManager.getOrCreateWorldForParallelRace(
                source.getServer(), player.getUuid(), freeSlot, targetSeed, net.minecraft.world.World.OVERWORLD);
                
            if (parallelWorld != null) {
                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —á–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–µ–π
                race.server.world.SpawnCache.warmupAndCache(parallelWorld, parallelWorld.getSpawnPos(), 2);
                
                // –£–ü–†–û–©–ï–ù–ò–ï: –ú–∏–∫—Å–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç null —á–∞–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–∏—Ä
                race.tp.SafeTeleport.toWorldSpawn(player, parallelWorld);
                race.hub.HubManager.setLastWorldSeed(player.getUuid(), targetSeed);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                race.server.world.ReturnPointRegistry.saveCurrent(player);
                
                source.sendFeedback(() -> Text.literal("–í—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–∏—Ä (—Å–ª–æ—Ç " + freeSlot + ") —Å —Å–∏–¥–æ–º " + targetSeed + "!").formatted(net.minecraft.util.Formatting.GREEN), false);
                LOGGER.info("[Race] Parallel race created: {} -> slot {} with seed {} (target: {})", 
                          player.getName().getString(), freeSlot, targetSeed, targetPlayerName);
            } else {
                source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞").formatted(net.minecraft.util.Formatting.RED), false);
            }
        } catch (Exception e) {
            source.sendFeedback(() -> Text.literal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–æ–Ω–∫–∏: " + e.getMessage()).formatted(net.minecraft.util.Formatting.RED), false);
            LOGGER.warn("[Race] Error during parallel race creation: {}", e.getMessage());
        }
        
        return 1;
    }


}
