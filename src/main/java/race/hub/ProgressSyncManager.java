package race.hub;

import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import race.net.PlayerProgressPayload;
import race.server.phase.PhaseState;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
 */
public class ProgressSyncManager {
    private static final Map<UUID, PlayerProgressData> playerProgress = new ConcurrentHashMap<>();
    private static final Map<Long, java.util.Set<UUID>> seedGroups = new ConcurrentHashMap<>();
    
    /**
     * –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    public static class PlayerProgressData {
        private final UUID playerId;
        private final String playerName;
        private final long seed;
        private final long startTime;
        private long currentTime;
        private String currentStage;
        private Map<String, Long> advancementTimes;
        private boolean isFinished;
        private long finishTime;
        private String activity = "";
        
        public PlayerProgressData(UUID playerId, String playerName, long seed) {
            this.playerId = playerId;
            this.playerName = playerName;
            this.seed = seed;
            this.startTime = System.currentTimeMillis();
            this.currentTime = startTime;
            this.currentStage = "–ù–∞—á–∞–ª–æ";
            this.advancementTimes = new HashMap<>();
            this.isFinished = false;
            this.finishTime = -1;
        }
        
        // Getters and setters
        public UUID getPlayerId() { return playerId; }
        public String getPlayerName() { return playerName; }
        public long getSeed() { return seed; }
        public long getStartTime() { return startTime; }
        public long getCurrentTime() { return currentTime; }
        public String getCurrentStage() { return currentStage; }
        public Map<String, Long> getAdvancementTimes() { return advancementTimes; }
        public boolean isFinished() { return isFinished; }
        public long getFinishTime() { return finishTime; }
        public String getActivity() { return activity; }
        
        public void setCurrentTime(long currentTime) { this.currentTime = currentTime; }
        public void setCurrentStage(String currentStage) { this.currentStage = currentStage; }
        public void setFinished(boolean finished) { this.isFinished = finished; }
        public void setFinishTime(long finishTime) { this.finishTime = finishTime; }
        public void setActivity(String activity) { this.activity = activity; }
        
        public void addAdvancement(String advancement, long time) {
            advancementTimes.put(advancement, time);
        }
        
        public long getRaceTime() {
            if (isFinished) {
                return finishTime - startTime;
            }
            return currentTime - startTime;
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    public static void registerPlayer(ServerPlayerEntity player, long seed) {
        UUID playerId = player.getUuid();
        String playerName = player.getName().getString();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        PlayerProgressData progressData = new PlayerProgressData(playerId, playerName, seed);
        playerProgress.put(playerId, progressData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ —Å–∏–¥—É
        seedGroups.computeIfAbsent(seed, k -> ConcurrentHashMap.newKeySet()).add(playerId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        notifyGroupOfNewPlayer(player, seed);
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
     */
    private static void notifyGroupOfNewPlayer(ServerPlayerEntity newPlayer, long seed) {
        java.util.Set<UUID> groupPlayers = seedGroups.get(seed);
        if (groupPlayers != null) {
            for (UUID playerId : groupPlayers) {
                if (!playerId.equals(newPlayer.getUuid())) {
                    ServerPlayerEntity player = newPlayer.getServer().getPlayerManager().getPlayer(playerId);
                    if (player != null) {
                        player.sendMessage(Text.literal("–ò–≥—Ä–æ–∫ " + newPlayer.getName().getString() + 
                            " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–Ω–∫–µ!").formatted(Formatting.GREEN), false);
                    }
                }
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
     */
    public static void updatePlayerProgress(UUID playerId, String stage, Map<String, Long> advancements) {
        PlayerProgressData progressData = playerProgress.get(playerId);
        if (progressData != null) {
            progressData.setCurrentTime(System.currentTimeMillis());
            progressData.setCurrentStage(stage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            for (Map.Entry<String, Long> entry : advancements.entrySet()) {
                progressData.addAdvancement(entry.getKey(), entry.getValue());
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            notifyGroupOfProgress(playerId, progressData);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–≥—Ä–æ–∫–∞
     */
    private static void notifyGroupOfProgress(UUID playerId, PlayerProgressData progressData) {
        java.util.Set<UUID> groupPlayers = seedGroups.get(progressData.getSeed());
        if (groupPlayers != null) {
            for (UUID otherPlayerId : groupPlayers) {
                if (!otherPlayerId.equals(playerId)) {
                    ServerPlayerEntity player = getPlayerById(otherPlayerId);
                    if (player != null) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        sendProgressUpdate(player, progressData);
                    }
                }
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫—É
     */
    private static void sendProgressUpdate(ServerPlayerEntity player, PlayerProgressData progressData) {
        // –°–æ–∑–¥–∞–µ–º payload —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        PlayerProgressPayload payload = new PlayerProgressPayload(
            progressData.getPlayerName(),
            progressData.getRaceTime(),
            progressData.getCurrentStage(),
            progressData.getAdvancementTimes(),
			player.getWorld().getRegistryKey().getValue().toString(),
			progressData.getActivity()
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ç—å (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–µ–≤–æ–º —Å–ª–æ–µ)
        // player.networkHandler.sendPacket(payload);
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –≥–æ–Ω–∫—É
     */
    public static void markPlayerFinished(UUID playerId) {
        PlayerProgressData progressData = playerProgress.get(playerId);
        if (progressData != null) {
            long finishTime = System.currentTimeMillis();
            progressData.setFinished(true);
            progressData.setFinishTime(finishTime);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            notifyGroupOfFinish(playerId, progressData);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏ –∏–≥—Ä–æ–∫–æ–º
     */
    private static void notifyGroupOfFinish(UUID playerId, PlayerProgressData progressData) {
        java.util.Set<UUID> groupPlayers = seedGroups.get(progressData.getSeed());
        if (groupPlayers != null) {
            for (UUID otherPlayerId : groupPlayers) {
                if (!otherPlayerId.equals(playerId)) {
                    ServerPlayerEntity player = getPlayerById(otherPlayerId);
                    if (player != null) {
                        long raceTime = progressData.getRaceTime();
                        String timeStr = formatTime(raceTime);
                        
                        player.sendMessage(Text.literal("üèÅ " + progressData.getPlayerName() + 
                            " –∑–∞–≤–µ—Ä—à–∏–ª –≥–æ–Ω–∫—É –∑–∞ " + timeStr + "!").formatted(Formatting.GOLD), true);
                    }
                }
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    public static PlayerProgressData getPlayerProgress(UUID playerId) {
        return playerProgress.get(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –ø–æ —Å–∏–¥—É
     */
    public static java.util.Set<UUID> getGroupPlayers(long seed) {
        return seedGroups.getOrDefault(seed, ConcurrentHashMap.newKeySet());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã
     */
    public static java.util.List<PlayerProgressData> getGroupLeaderboard(long seed) {
        java.util.Set<UUID> groupPlayers = seedGroups.get(seed);
        if (groupPlayers == null) {
            return new java.util.ArrayList<>();
        }
        
        return groupPlayers.stream()
            .map(playerProgress::get)
            .filter(data -> data != null)
            .sorted((a, b) -> {
                if (a.isFinished() && b.isFinished()) {
                    return Long.compare(a.getRaceTime(), b.getRaceTime());
                } else if (a.isFinished()) {
                    return -1; // –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –≥–æ–Ω–∫—É –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
                } else if (b.isFinished()) {
                    return 1;
                } else {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    return Long.compare(a.getRaceTime(), b.getRaceTime());
                }
            })
            .collect(java.util.stream.Collectors.toList());
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    public static void removePlayer(UUID playerId) {
        PlayerProgressData progressData = playerProgress.remove(playerId);
        if (progressData != null) {
            java.util.Set<UUID> groupPlayers = seedGroups.get(progressData.getSeed());
            if (groupPlayers != null) {
                groupPlayers.remove(playerId);
                if (groupPlayers.isEmpty()) {
                    seedGroups.remove(progressData.getSeed());
                }
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     */
    private static ServerPlayerEntity getPlayerById(UUID playerId) {
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private static String formatTime(long milliseconds) {
        long seconds = milliseconds / 1000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        long hours = minutes / 60;
        minutes = minutes % 60;
        
        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%d:%02d", minutes, seconds);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
     */
    public static GroupStatistics getGroupStatistics(long seed) {
        java.util.Set<UUID> groupPlayers = seedGroups.get(seed);
        if (groupPlayers == null) {
            return new GroupStatistics(0, 0, 0, 0);
        }
        
        int totalPlayers = groupPlayers.size();
        int finishedPlayers = 0;
        long totalTime = 0;
        long bestTime = Long.MAX_VALUE;
        
        for (UUID playerId : groupPlayers) {
            PlayerProgressData data = playerProgress.get(playerId);
            if (data != null) {
                if (data.isFinished()) {
                    finishedPlayers++;
                    long raceTime = data.getRaceTime();
                    totalTime += raceTime;
                    if (raceTime < bestTime) {
                        bestTime = raceTime;
                    }
                }
            }
        }
        
        return new GroupStatistics(totalPlayers, finishedPlayers, totalTime, bestTime);
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
     */
    public static class GroupStatistics {
        private final int totalPlayers;
        private final int finishedPlayers;
        private final long totalTime;
        private final long bestTime;
        
        public GroupStatistics(int totalPlayers, int finishedPlayers, long totalTime, long bestTime) {
            this.totalPlayers = totalPlayers;
            this.finishedPlayers = finishedPlayers;
            this.totalTime = totalTime;
            this.bestTime = bestTime;
        }
        
        public int getTotalPlayers() { return totalPlayers; }
        public int getFinishedPlayers() { return finishedPlayers; }
        public long getTotalTime() { return totalTime; }
        public long getBestTime() { return bestTime == Long.MAX_VALUE ? -1 : bestTime; }
    }
}
