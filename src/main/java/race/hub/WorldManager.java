package race.hub;

import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.world.World;
import net.minecraft.util.math.BlockPos;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import race.server.world.EnhancedWorldManager;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
 */
public class WorldManager {
    private static final Map<UUID, ServerWorld> playerWorlds = new HashMap<>();
    private static final Map<UUID, Long> playerSeeds = new HashMap<>();
    // –î–û–ë–ê–í–õ–Ø–ï–ú: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    private static final Map<UUID, Integer> playerSlots = new HashMap<>();
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static ServerWorld createPlayerWorld(MinecraftServer server, ServerPlayerEntity player, long seed) {
        UUID playerId = player.getUuid();
        
        // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –º–∏—Ä –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        ServerWorld playerWorld = EnhancedWorldManager.getOrCreateWorld(server, playerId, seed, World.OVERWORLD);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        playerWorlds.put(playerId, playerWorld);
        playerSeeds.put(playerId, seed);
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –µ–≥–æ –º–∏—Ä
        teleportPlayerToWorld(player, playerWorld);
        
        return playerWorld;
    }
    
    /**
     * –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä
     */
    public static void teleportPlayerToWorld(ServerPlayerEntity player, ServerWorld world) {
        // –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞
        BlockPos spawnPos = findSafeSpawnPosition(world);
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
        player.teleport(world, spawnPos.getX() + 0.5, spawnPos.getY(), spawnPos.getZ() + 0.5, 0, 0);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        player.sendMessage(Text.literal("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä!").formatted(Formatting.GREEN), false);
        player.sendMessage(Text.literal("–°–∏–¥: " + playerSeeds.get(player.getUuid())).formatted(Formatting.AQUA), false);
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞
     */
    private static BlockPos findSafeSpawnPosition(ServerWorld world) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —Å–ø–∞–≤–Ω–∞ Minecraft
        BlockPos spawnPos = world.getSpawnPos();
        
        // –ò—â–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ 10 –±–ª–æ–∫–æ–≤ –æ—Ç —Å–ø–∞–≤–Ω–∞
        for (int x = -10; x <= 10; x++) {
            for (int z = -10; z <= 10; z++) {
                BlockPos pos = spawnPos.add(x, 0, z);
                if (isSafeSpawnPosition(world, pos)) {
                    if (world.getDimensionEntry().matchesKey(net.minecraft.world.dimension.DimensionTypes.THE_NETHER)) {
                        int y = Math.max(32, Math.min(120, pos.getY()));
                        pos = new BlockPos(pos.getX(), y, pos.getZ());
                    }
                    return pos;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∞–≤–Ω
        return spawnPos;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞
     */
    private static boolean isSafeSpawnPosition(ServerWorld world, BlockPos pos) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥ –Ω–æ–≥–∞–º–∏ –µ—Å—Ç—å —Ç–≤–µ—Ä–¥—ã–π –±–ª–æ–∫
        if (world.getBlockState(pos.down()).isAir()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –µ—Å—Ç—å –º–µ—Å—Ç–æ
        if (!world.getBlockState(pos).isAir() || !world.getBlockState(pos.up()).isAir()) {
            return false;
        }
        
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∏—Ä –∏–≥—Ä–æ–∫–∞
     */
    public static ServerWorld getPlayerWorld(UUID playerId) {
        return playerWorlds.get(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–¥ –∏–≥—Ä–æ–∫–∞
     */
    public static long getPlayerSeed(UUID playerId) {
        return playerSeeds.getOrDefault(playerId, -1L);
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –º–∏—Ä –∏–≥—Ä–æ–∫–∞
     */
    public static void removePlayerWorld(UUID playerId) {
        playerWorlds.remove(playerId);
        playerSeeds.remove(playerId);
        playerSlots.remove(playerId); // –î–û–ë–ê–í–õ–Ø–ï–ú: –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –∏–≥—Ä–æ–∫–∞
     */
    public static int getPlayerSlot(UUID playerId) {
        return playerSlots.getOrDefault(playerId, 0);
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–æ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    public static void setPlayerSlot(UUID playerId, int slot) {
        playerSlots.put(playerId, slot);
        System.out.println("‚úì Manually set slot " + slot + " for player: " + playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–ª–æ—Ç–∞—Ö –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    public static void debugPlayerSlots() {
        System.out.println("=== PLAYER SLOTS DEBUG ===");
        for (Map.Entry<UUID, Integer> entry : playerSlots.entrySet()) {
            System.out.println("Player " + entry.getKey() + " -> Slot " + entry.getValue());
        }
        System.out.println("========================");
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∏—Ä –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static ServerWorld createPlayerNetherWorld(MinecraftServer server, ServerPlayerEntity player) {
        UUID playerId = player.getUuid();
        long seed = getPlayerSeed(playerId);
        
        if (seed < 0) {
            return null;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        int playerSlot = getPlayerSlot(playerId);
        System.out.println("üîç Cached slot for player " + player.getName().getString() + ": " + playerSlot);
        
        // –ï—Å–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
        if (playerSlot == 0) {
            String currentWorldKey = player.getServerWorld().getRegistryKey().getValue().toString();
            playerSlot = extractSlotFromWorldKey(currentWorldKey);
            System.out.println("üîç Extracted slot from current world: " + playerSlot);
            
            // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç
            if (playerSlot > 0) {
                setPlayerSlot(playerId, playerSlot);
                System.out.println("‚úì Cached extracted slot " + playerSlot + " for player " + player.getName().getString());
            }
        }
        
        ServerWorld netherWorld;
        if (playerSlot > 0) {
            netherWorld = EnhancedWorldManager.getOrCreateWorldForGroup(server, playerSlot, seed, World.NETHER);
            System.out.println("‚úì Using slot " + playerSlot + " for Nether world");
        } else {
            netherWorld = EnhancedWorldManager.getOrCreateWorld(server, playerId, seed, World.NETHER);
            System.out.println("‚úì Using personal world for Nether world");
        }
        
        return netherWorld;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∏—Ä –≠–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static ServerWorld createPlayerEndWorld(MinecraftServer server, ServerPlayerEntity player) {
        UUID playerId = player.getUuid();
        long seed = getPlayerSeed(playerId);
        
        if (seed < 0) {
            return null;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        int playerSlot = getPlayerSlot(playerId);
        System.out.println("üîç Cached slot for player " + player.getName().getString() + ": " + playerSlot);
        
        // –ï—Å–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
        if (playerSlot == 0) {
            String currentWorldKey = player.getServerWorld().getRegistryKey().getValue().toString();
            playerSlot = extractSlotFromWorldKey(currentWorldKey);
            System.out.println("üîç Extracted slot from current world: " + playerSlot);
            
            // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç
            if (playerSlot > 0) {
                setPlayerSlot(playerId, playerSlot);
                System.out.println("‚úì Cached extracted slot " + playerSlot + " for player " + player.getName().getString());
            }
        }
        
        ServerWorld endWorld;
        if (playerSlot > 0) {
            // –ò–≥—Ä–æ–∫ –≤ —Å–ª–æ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è End
            endWorld = EnhancedWorldManager.getOrCreateWorldForGroup(server, playerSlot, seed, World.END);
            System.out.println("‚úì Using slot " + playerSlot + " for End world");
        } else {
            // –ò–≥—Ä–æ–∫ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –º–∏—Ä–µ - —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π End
            endWorld = EnhancedWorldManager.getOrCreateWorld(server, playerId, seed, World.END);
            System.out.println("‚úì Using personal world for End world");
        }
        
        return endWorld;
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –∏–∑ –∫–ª—é—á–∞ –º–∏—Ä–∞
     */
    private static int extractSlotFromWorldKey(String worldKey) {
        try {
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "slot" + —á–∏—Å–ª–æ
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("slot(\\d+)");
            java.util.regex.Matcher matcher = pattern.matcher(worldKey);
            if (matcher.find()) {
                int slot = Integer.parseInt(matcher.group(1));
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ—Ç–∞
                if (slot >= 1 && slot <= 100) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ—Ç–æ–≤
                    System.out.println("‚úì Extracted valid slot " + slot + " from world key: " + worldKey);
                    return slot;
                } else {
                    System.err.println("‚ö† Invalid slot number " + slot + " in world key: " + worldKey);
                    return 0;
                }
            }
        } catch (Exception e) {
            System.err.println("Failed to extract slot from world key: " + worldKey + " - " + e.getMessage());
        }
        System.out.println("‚ö† No valid slot found in world key: " + worldKey + " (using personal world)");
        return 0; // 0 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä
    }
    
    /**
     * –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –ù–∏–∂–Ω–∏–π –º–∏—Ä
     */
    public static void teleportToNether(ServerPlayerEntity player) {
        ServerWorld netherWorld = createPlayerNetherWorld(player.getServer(), player);
        if (netherWorld != null) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–µ–º –º–∏—Ä–µ
            BlockPos portalPos = findNetherPortal(netherWorld);
            player.teleport(netherWorld, portalPos.getX() + 0.5, portalPos.getY(), portalPos.getZ() + 0.5, 0, 0);
        }
    }
    
    /**
     * –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –≠–Ω–¥
     */
    public static void teleportToEnd(ServerPlayerEntity player) {
        ServerWorld endWorld = createPlayerEndWorld(player.getServer(), player);
        if (endWorld != null) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ–±–æ–≤ –ü–ï–†–ï–î —Å–ø–∞–≤–Ω–æ–º –¥—Ä–∞–∫–æ–Ω–∞
            clearInvalidEndMobs(endWorld);
            
            // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤ End (–≤–Ω–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º)
            BlockPos endPos = new BlockPos(100, 50, 0);
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ End
            createEndIslandPlatform(endWorld, endPos);
            
            // –°–ø–∞–≤–Ω–∏–º –¥—Ä–∞–∫–æ–Ω–∞ End
            spawnEndDragon(endWorld);
            
            player.teleport(endWorld, endPos.getX() + 0.5, endPos.getY(), endPos.getZ() + 0.5, 0, 0);
            
            player.sendMessage(
                net.minecraft.text.Text.literal("End –º–∏—Ä –æ—á–∏—â–µ–Ω –æ—Ç Overworld –º–æ–±–æ–≤! –≠–Ω–¥–µ—Ä–º–µ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ End —Å—É—â–µ—Å—Ç–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")
                    .formatted(net.minecraft.util.Formatting.GREEN), false);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ End (–≤–Ω–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞)
     */
    private static void createEndIslandPlatform(ServerWorld world, BlockPos playerPos) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É 5x5 –∏–∑ —ç–Ω–¥-–∫–∞–º–Ω—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
            for (int x = -2; x <= 2; x++) {
                for (int z = -2; z <= 2; z++) {
                    BlockPos pos = playerPos.add(x, -1, z);
                    world.setBlockState(pos, net.minecraft.block.Blocks.END_STONE.getDefaultState());
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ (3x3)
            for (int x = -1; x <= 1; x++) {
                for (int z = -1; z <= 1; z++) {
                    BlockPos pos = playerPos.add(x, 0, z);
                    if (world.getBlockState(pos).getBlock() != net.minecraft.block.Blocks.AIR) {
                        world.setBlockState(pos, net.minecraft.block.Blocks.AIR.getDefaultState());
                    }
                }
            }
            
            System.out.println("‚úì Created End island platform for player at " + playerPos);
        } catch (Throwable t) {
            System.err.println("Failed to create End island platform: " + t.getMessage());
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ End –ø–æ—Ä—Ç–∞–ª–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    private static void createEndPortalArea(ServerWorld world, BlockPos portalPos) {
        try {
            // –û—á–∏—â–∞–µ–º –±–æ–ª—å—à—É—é –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –ø–æ—Ä—Ç–∞–ª–∞ (15x15x15)
            for (int x = -7; x <= 7; x++) {
                for (int y = -7; y <= 7; y++) {
                    for (int z = -7; z <= 7; z++) {
                        BlockPos pos = portalPos.add(x, y, z);
                        if (world.getBlockState(pos).getBlock() != net.minecraft.block.Blocks.AIR) {
                            world.setBlockState(pos, net.minecraft.block.Blocks.AIR.getDefaultState());
                        }
                    }
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ 62 (–∫–∞–∫ –≤ –≤–∞–Ω–∏–ª–ª–µ)
            BlockPos playerPlatform = new BlockPos(0, 62, 0);
            for (int x = -2; x <= 2; x++) {
                for (int z = -2; z <= 2; z++) {
                    BlockPos pos = playerPlatform.add(x, -1, z);
                    world.setBlockState(pos, net.minecraft.block.Blocks.END_STONE.getDefaultState());
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ (3x3)
            for (int x = -1; x <= 1; x++) {
                for (int z = -1; z <= 1; z++) {
                    BlockPos pos = playerPlatform.add(x, 0, z);
                    if (world.getBlockState(pos).getBlock() != net.minecraft.block.Blocks.AIR) {
                        world.setBlockState(pos, net.minecraft.block.Blocks.AIR.getDefaultState());
                    }
                }
            }
            
            System.out.println("‚úì Created clean End portal area at " + portalPos + " with player platform");
        } catch (Throwable t) {
            System.err.println("Failed to create End portal area: " + t.getMessage());
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —ç–Ω–¥-–∫–∞–º–Ω—è –≤ End –º–∏—Ä–µ
    private static void createEndSpawnPlatform(ServerWorld world, BlockPos center) {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É 15x15 –∏–∑ —ç–Ω–¥-–∫–∞–º–Ω—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            for (int x = -7; x <= 7; x++) {
                for (int z = -7; z <= 7; z++) {
                    BlockPos pos = center.add(x, -1, z);
                    world.setBlockState(pos, net.minecraft.block.Blocks.END_STONE.getDefaultState());
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ (3x3)
            for (int x = -1; x <= 1; x++) {
                for (int z = -1; z <= 1; z++) {
                    BlockPos pos = center.add(x, 0, z);
                    world.setBlockState(pos, net.minecraft.block.Blocks.END_STONE.getDefaultState());
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ (5x5)
            for (int x = -2; x <= 2; x++) {
                for (int z = -2; z <= 2; z++) {
                    BlockPos pos = center.add(x, 0, z);
                    if (world.getBlockState(pos).isAir()) {
                        world.setBlockState(pos, net.minecraft.block.Blocks.END_STONE.getDefaultState());
                    }
                }
            }
            
            System.out.println("‚úì End spawn platform created at " + center + " (15x15 base, 5x5 safe zone)");
        } catch (Throwable t) {
            System.err.println("Failed to create End platform: " + t.getMessage());
        }
    }
    
    // –°–ø–∞–≤–Ω –¥—Ä–∞–∫–æ–Ω–∞ End - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ö–ê–°–¢–û–ú–ù–´–• –ú–ò–†–û–í
    private static void spawnEndDragon(ServerWorld world) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ End –º–∏—Ä
        if (!isEndDimension(world)) {
            System.err.println("Trying to spawn dragon in non-End world: " + 
                              world.getRegistryKey().getValue());
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥—Ä–∞–∫–æ–Ω
            var existingDragons = world.getEntitiesByType(
                net.minecraft.entity.EntityType.ENDER_DRAGON, 
                net.minecraft.util.math.Box.of(new net.minecraft.util.math.Vec3d(0, 64, 0), 400, 400, 400),
                entity -> true
            );
            
            if (existingDragons.isEmpty()) {
                BlockPos fightOrigin = new BlockPos(0, 64, 0);
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: EnderDragonFight –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                var dragonFight = world.getEnderDragonFight();
                if (dragonFight == null) {
                    System.err.println("CRITICAL: No EnderDragonFight in custom End world!");
                    return;
                }
                
                var dragon = (net.minecraft.entity.boss.dragon.EnderDragonEntity) net.minecraft.entity.EntityType.ENDER_DRAGON.create(world);
                if (dragon != null) {
                    dragon.setFight(dragonFight);
                    dragon.setFightOrigin(fightOrigin);
                    dragon.getPhaseManager().setPhase(net.minecraft.entity.boss.dragon.phase.PhaseType.HOLDING_PATTERN);
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–∞–≤–Ω–∏–º –¥—Ä–∞–∫–æ–Ω–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ (30 –±–ª–æ–∫–æ–≤) –≤–º–µ—Å—Ç–æ 64
                    dragon.refreshPositionAndAngles(0.0, 30.0, 0.0, 0.0F, 0.0F);
                    world.spawnEntity(dragon);
                    
                    registerDragonInFight(dragonFight, dragon);
                    System.out.println("‚úì Dragon spawned in custom End world: " + 
                                     world.getRegistryKey().getValue());
                }
            } else {
                System.out.println("‚úì End dragon already exists, skipping spawn");
            }
        } catch (Throwable t) {
            System.err.println("Failed to spawn End dragon: " + t.getMessage());
            t.printStackTrace();
        }
    }
    
    // –£–î–ê–õ–ï–ù–û: createEndPortal –∏ createEndPortalPlatform - –ø–æ—Ä—Ç–∞–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–Ω–∏–ª—å–Ω–æ–π –∏–≥—Ä–æ–π
    
    // –£–î–ê–õ–ï–ù–û: createEndCrystals - –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–Ω–∏–ª—å–Ω–æ–π –∏–≥—Ä–æ–π
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–µ–º –º–∏—Ä–µ
     */
    private static BlockPos findNetherPortal(ServerWorld world) {
        // –ò—â–µ–º –ø–æ—Ä—Ç–∞–ª –≤ —Ä–∞–¥–∏—É—Å–µ 100 –±–ª–æ–∫–æ–≤ –æ—Ç —Å–ø–∞–≤–Ω–∞
        BlockPos spawnPos = world.getSpawnPos();
        
        for (int x = -100; x <= 100; x += 10) {
            for (int z = -100; z <= 100; z += 10) {
                BlockPos pos = spawnPos.add(x, 0, z);
                if (world.getBlockState(pos).getBlock() == net.minecraft.block.Blocks.NETHER_PORTAL) {
                    return pos;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ—Ä—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∞–≤–Ω
        return spawnPos;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Ö –º–∏—Ä–∞–º–∏
     */
    public static Map<UUID, ServerWorld> getAllPlayerWorlds() {
        return new HashMap<>(playerWorlds);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ End –º–∏—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
     */
    public static boolean isPlayerEndWorld(ServerWorld world, UUID playerId) {
        if (!isEndDimension(world)) {
            return false;
        }
        
        String worldName = world.getRegistryKey().getValue().getPath();
        String playerIdStr = playerId.toString().replace("-", "");
        
        return worldName.contains("end") && worldName.contains(playerIdStr.substring(0, 8));
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ–±–æ–≤ –∏–∑ End –º–∏—Ä–∞
     */
    public static void clearInvalidEndMobs(ServerWorld endWorld) {
        if (!isEndDimension(endWorld)) {
            return;
        }
        
        try {
            // –°–ø–∏—Å–æ–∫ –º–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ End (—Ç–æ–ª—å–∫–æ Overworld –º–æ–±—ã)
            var invalidMobTypes = java.util.List.of(
                net.minecraft.entity.EntityType.COW, net.minecraft.entity.EntityType.PIG, 
                net.minecraft.entity.EntityType.SHEEP, net.minecraft.entity.EntityType.CHICKEN,
                net.minecraft.entity.EntityType.HORSE, net.minecraft.entity.EntityType.DONKEY, 
                net.minecraft.entity.EntityType.MULE, net.minecraft.entity.EntityType.LLAMA,
                net.minecraft.entity.EntityType.VILLAGER, net.minecraft.entity.EntityType.ZOMBIE, 
                net.minecraft.entity.EntityType.SKELETON, net.minecraft.entity.EntityType.CREEPER, 
                net.minecraft.entity.EntityType.SPIDER, net.minecraft.entity.EntityType.WITCH,
                net.minecraft.entity.EntityType.SLIME, net.minecraft.entity.EntityType.MAGMA_CUBE,
                net.minecraft.entity.EntityType.BLAZE, net.minecraft.entity.EntityType.GHAST,
                net.minecraft.entity.EntityType.PIGLIN, net.minecraft.entity.EntityType.HOGLIN
            );
            
            int totalRemoved = 0;
            
            for (var mobType : invalidMobTypes) {
                var entities = endWorld.getEntitiesByType(
                    mobType,
                    net.minecraft.util.math.Box.of(
                        new net.minecraft.util.math.Vec3d(0, 64, 0), 
                        500, 200, 500
                    ),
                    entity -> true
                );
                
                for (var entity : entities) {
                    entity.discard();
                    totalRemoved++;
                }
            }
            
            System.out.println("‚úì Removed " + totalRemoved + " Overworld mobs from End world (Endermen and End creatures preserved): " + 
                              endWorld.getRegistryKey().getValue());
                              
        } catch (Exception e) {
            System.err.println("Failed to clear invalid End mobs: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Overworld –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ End –º–∏—Ä—É
     */
    public static ServerWorld getPlayerOverworldFromEndWorld(ServerWorld endWorld) {
        String endWorldName = endWorld.getRegistryKey().getValue().getPath();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ End –º–∏—Ä–∞
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "race_end_<uuid>" –∏–ª–∏ "fabric_race:player_<uuid>_end"
        if (endWorldName.contains("end")) {
            // –ò—â–µ–º UUID –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–∏—Ä–∞
            for (Map.Entry<UUID, ServerWorld> entry : playerWorlds.entrySet()) {
                String playerIdStr = entry.getKey().toString().replace("-", "");
                if (endWorldName.contains(playerIdStr.substring(0, 8))) {
                    return entry.getValue(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Overworld –∏–≥—Ä–æ–∫–∞
                }
            }
        }
        
        return null;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç EnderDragonFight –≤ –º–∏—Ä —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
     */
    private static void setEnderDragonFightInWorld(ServerWorld world, net.minecraft.entity.boss.dragon.EnderDragonFight fight) {
        try {
            var field = ServerWorld.class.getDeclaredField("enderDragonFight");
            field.setAccessible(true);
            field.set(world, fight);
            System.out.println("‚úì Set EnderDragonFight in custom world: " + 
                             world.getRegistryKey().getValue());
        } catch (Exception e) {
            System.err.println("Failed to set EnderDragonFight: " + e.getMessage());
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç UUID –¥—Ä–∞–∫–æ–Ω–∞ –≤ EnderDragonFight —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
     */
    private static void registerDragonInFight(net.minecraft.entity.boss.dragon.EnderDragonFight fight, net.minecraft.entity.boss.dragon.EnderDragonEntity dragon) {
        try {
            var field = net.minecraft.entity.boss.dragon.EnderDragonFight.class.getDeclaredField("dragonUuid");
            field.setAccessible(true);
            field.set(fight, dragon.getUuid());
            System.out.println("‚úì Registered dragon UUID for Boss Bar");
        } catch (Exception e) {
            System.err.println("Failed to register dragon UUID: " + e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Ä End –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∏—Ä—ã)
     */
    public static boolean isEndDimension(ServerWorld world) {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º matchesKey() - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
            return world.getDimensionEntry().matchesKey(net.minecraft.world.dimension.DimensionTypes.THE_END);
        } catch (Exception e) {
            try {
                // Fallback: —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
                var endDimensionType = world.getRegistryManager()
                    .get(net.minecraft.registry.RegistryKeys.DIMENSION_TYPE)
                    .get(net.minecraft.world.dimension.DimensionTypes.THE_END);
                return world.getDimensionEntry().value().equals(endDimensionType);
            } catch (Exception e2) {
                // Fallback –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∏—Ä–æ–≤ - –ø–æ –∏–º–µ–Ω–∏ –º–∏—Ä–∞
                String worldName = world.getRegistryKey().getValue().getPath();
                return worldName.contains("end");
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Ä Nether –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∏—Ä—ã)
     */
    public static boolean isNetherDimension(ServerWorld world) {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º matchesKey() - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
            return world.getDimensionEntry().matchesKey(net.minecraft.world.dimension.DimensionTypes.THE_NETHER);
        } catch (Exception e) {
            try {
                // Fallback: —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
                var netherDimensionType = world.getRegistryManager()
                    .get(net.minecraft.registry.RegistryKeys.DIMENSION_TYPE)
                    .get(net.minecraft.world.dimension.DimensionTypes.THE_NETHER);
                return world.getDimensionEntry().value().equals(netherDimensionType);
            } catch (Exception e2) {
                // Fallback –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∏—Ä–æ–≤ - –ø–æ –∏–º–µ–Ω–∏ –º–∏—Ä–∞
                String worldName = world.getRegistryKey().getValue().getPath();
                return worldName.contains("nether");
            }
        }
    }
    

}
